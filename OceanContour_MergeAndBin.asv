%% OceanContour - Join exported burst files with existing ENU data and bin into sampling periods
%% IB

fileregexp_BURST = '^(Burst_\d\d\d.VTC).+(\d.mat)'
cb = 1; %Is the instrument continuously bursting?

fpath = 'G:\GA_OceanContour_TEST'; % Folder containing input burst files
fpath_c = replace(fpath,'\','\\');

flist = dir(fpath);
flist = extractfield(flist,'name');
flist = string(flist);
fmatch = regexp(flist,fileregexp_BURST);
fmatch = find(~cellfun('isempty',fmatch));

%fnumber=2; %Number of files

% Save Files info
prefix = ['Out_']; %where to save the files
savepath = ['G:\GA_OceanContour_TEST']; %Sequential name of files


%% Raw Data - load each file and append to a fake burst file before overwriting the original (will need to add extra variables if later functions use them)
for i = 1:length(fmatch)

  hold = load(sprintf('%s%s%s',[fpath_c,'\\',flist(fmatch(i))]));
  if i == 1
    tmp_d = hold.Burst_Data;
    tmp_c = hold.Config ;
    tmp_ofn = fieldnames(hold.Burst_Data);
    tmp_fn = replace(tmp_ofn,'%','');
    %tmp_ofn = replace(tmp_ofn,'%','''%');

 % This is a temporary fix for ocean contour having a few variables which contain special characters (%) 
 % EXPORTED COORD CONVESTION DATA DOES NOT HAVE THIS ISSUE
  else
    for ii = 1:length(tmp_fn)
        %if (ii<12) && (ii>8)
        %else
            tmp_d.(tmp_fn{ii}) = [tmp_d.(tmp_fn{ii}) hold.Burst_Data.(tmp_fn{ii})];
        %end
    end
  end

end
Data_Burst = tmp_d;
Config_Burst = tmp_c;
Data_Burst.Range = Data_Burst.Range(1:Config_Burst.Instrument_burst_nCells);

% Introduce number of bins:
Nbin=Config_Burst.Instrument_burst_nCells;

% Introduce number of files from MIDAS software
fn=1;

% Sampling frequency
fs=Config_Burst.Instrument_burst_sampleRate; 
    
for bin=1:Nbin
    
    % Ensemble number
    Ens_N=[];
    
    for j=1:fn
                
        fnumber=j;
        
        %fname = [prefix int2str(fnumber) '.mat'];
        
        
        %load([ fpath '/' fname ])
        
        % Time and Ensemble Size
        time=Data_Burst.MatlabTimeStamp;
        date=datevec(time);
        Burst_length=1; %10 minutes
        
        % Ensemble treshold
        
        % Modify depending on the sampling frequency and in 
        % Delta time in days use to separate burst
        % In our case it was 10 mins between every burst, so a dt greater
        % than 2/fs should cut out the burst in the right place, but CHECK!
        % Also needs to modify if instrument is recording continuously
        
        dt_days=2*1/fs/3600/24; %Modified because sometimes time step is slightly larger than 1/dt sec
        dt_tstamps=diff(time);
        k=1;
        
        %% 
        for i=1:length(dt_tstamps)
            if dt_tstamps(i)>dt_days; % Any dt greater than dt_days marks a new ensemble
                % New Ensemble begins
                ens_in(k)=i;
                ens_end(k)=i-1; % THIS IS NEVER USED
                k=k+1;
            else
            end
        end
        %% New catch for continuous sampling regimes

        if ~exist('ens_in','var')
            warning('One Ensemble Dectected')
            ens_in(1) = 1
            ens_in(2) = length(dt_tstamps)
        end

        ens_length=diff(ens_in);
        
        % Good data to start:
        % Here we start with the first burst, even if some burst are out of
        % the water (we just do not use them later)
        
        ens_start=1;
        tstart=1;
        for i=1:ens_start-1;
            tstart=ens_length(i)+tstart;
        end
        
        Nens0=length(ens_length);
        tstart(ens_start)=tstart;
        
        % Everything useful is stored in the structure Sig.
        % NOW WE FLIP ALL THESE TO KEEP THE NEW CONVENTION
        for i=ens_start:Nens0
            tend(i)=tstart(i)+ens_length(i)-1;
            Sig(j).vbeam1(1:ens_length(i),i-ens_start+1)=Data_Burst.VelBeam1(bin,tstart(i):tend(i));
            Sig(j).vbeam2(1:ens_length(i),i-ens_start+1)=Data_Burst.VelBeam2(bin,tstart(i):tend(i));
            Sig(j).vbeam3(1:ens_length(i),i-ens_start+1)=Data_Burst.VelBeam3(bin,tstart(i):tend(i));
            Sig(j).vbeam4(1:ens_length(i),i-ens_start+1)=Data_Burst.VelBeam4(bin,tstart(i):tend(i));
            Sig(j).vbeam5(1:ens_length(i),i-ens_start+1)=Data2.IBurst_VelBeam5(bin,tstart(i):tend(i));
            Sig(j).u_east(1:ens_length(i),i-ens_start+1)=Data_Burst.VelEast(bin,tstart(i):tend(i));
            Sig(j).v_north(1:ens_length(i),i-ens_start+1)=Data_Burst.VelNorth(bin,tstart(i):tend(i));
            Sig(j).w_up(1:ens_length(i),i-ens_start+1)=Data_Burst.VelUp(bin,tstart(i):tend(i));
            
            Sig(j).u_x(1:ens_length(i),i-ens_start+1)=Data_Burst.VelX(bin,tstart(i):tend(i));
            Sig(j).v_y(1:ens_length(i),i-ens_start+1)=Data_Burst.VelY(bin,tstart(i):tend(i));
            Sig(j).w_z(1:ens_length(i),i-ens_start+1)=Data_Burst.VelZ(bin,tstart(i):tend(i));
            
            Sig(j).heading(1:ens_length(i),i-ens_start+1)=Data_Burst.Heading(tstart(i):tend(i));
            Sig(j).pitch(1:ens_length(i),i-ens_start+1)=Data_Burst.Pitch(tstart(i):tend(i));
            Sig(j).roll(1:ens_length(i),i-ens_start+1)=Data_Burst.Roll(tstart(i):tend(i));
            
            % Correlation and Amplitude for QC
            
            Sig(j).Corbeam1(1:ens_length(i),i-ens_start+1)=Data_Burst.CorBeam1(bin,tstart(i):tend(i));
            Sig(j).Corbeam2(1:ens_length(i),i-ens_start+1)=Data_Burst.CorBeam2(bin,tstart(i):tend(i));
            Sig(j).Corbeam3(1:ens_length(i),i-ens_start+1)=Data_Burst.CorBeam3(bin,tstart(i):tend(i));
            Sig(j).Corbeam4(1:ens_length(i),i-ens_start+1)=Data_Burst.CorBeam4(bin,tstart(i):tend(i));
            Sig(j).Corbeam5(1:ens_length(i),i-ens_start+1)=Data2.IBurst_CorBeam5(bin,tstart(i):tend(i));
            
            Sig(j).Ampbeam1(1:ens_length(i),i-ens_start+1)=Data_Burst.AmpBeam1(bin,tstart(i):tend(i));
            Sig(j).Ampbeam2(1:ens_length(i),i-ens_start+1)=Data_Burst.AmpBeam2(bin,tstart(i):tend(i));
            Sig(j).Ampbeam3(1:ens_length(i),i-ens_start+1)=Data_Burst.AmpBeam3(bin,tstart(i):tend(i));
            Sig(j).Ampbeam4(1:ens_length(i),i-ens_start+1)=Data_Burst.AmpBeam4(bin,tstart(i):tend(i));
            Sig(j).Ampbeam5(1:ens_length(i),i-ens_start+1)=Data2.IBurst_AmpBeam5(bin,tstart(i):tend(i));
            
        
            tstart(i+1)=tend(i)+1;
            
        end

        Sig(j).pressure=Data_Burst.Pressure;
        Sig(j).range=Data_Burst.Range;
        Sig(j).time=Data_Burst.MatlabTimeStamp;
        
        % Time ensemble start
        Sig(j).Ens_time=Data_Burst.MatlabTimeStamp(tstart(1:end-1));       
        Sig(j).Iheading=Data2.IBurst_Heading;
        Sig(j).Ipitch=Data2.IBurst_Pitch;
        Sig(j).Iroll=Data2.IBurst_Roll;
        Sig(j).Ipressure=Data2.IBurst_Pressure;
        Sig(j).Irange=Data2.IBurst_Range;
        Sig(j).Itime=Data2.IBurst_MatlabTimeStamp;
        
        Sig(j).IEns_time=Data2.IBurst_MatlabTimeStamp(tstart(1:end-1));
        
        Nens(j)=Nens0;
        Ens_N=[Ens_N ens_length];
        
        
    end
    
    % Use this figure to check the size of the burst (or ensembles)
    % When battery is low, the Nortek Signature decreases ensemble lenght
    
%     figure(1)
%     clf
%     set(gca,'FontSize',14)
%     plot([1:1:length(Ens_N)],Ens_N)
%     xlabel('ensemble')
%     ylabel('Ensemble Length')
    
    
    % Then we save in only one mat_file for each bin:
    % Choose a different name if you want, here we chose SigData
    
    SigData.vbeam1=[];
    SigData.vbeam2=[];
    SigData.vbeam3=[];
    SigData.vbeam4=[];
    SigData.vbeam5=[];
    
    SigData.u_east=[];
    SigData.v_north=[];
    SigData.w_up=[];
    
    SigData.u_x=[];
    SigData.v_y=[];
    SigData.w_z=[];
    
    SigData.time=[];
    SigData.Itime=[];
    SigData.Ens_time=[];
    SigData.IEns_time=[];
    
    SigData.Heading=[];
    SigData.Roll=[];
    SigData.Pitch=[];
    SigData.Pressure=[];
    
    SigData.IHeading=[];
    SigData.IRoll=[];
    SigData.IPitch=[];
    SigData.IPressure=[];
    
    SigData.Corbeam1=[];
    SigData.Corbeam2=[];
    SigData.Corbeam3=[];
    SigData.Corbeam4=[];
    SigData.Corbeam5=[];
    
    SigData.Ampbeam1=[];
    SigData.Ampbeam2=[];
    SigData.Ampbeam3=[];
    SigData.Ampbeam4=[];
    SigData.Ampbeam5=[];
    
    
    for j=1:fn
        SigData.vbeam1=[SigData.vbeam1 Sig(j).vbeam1];
        SigData.vbeam2=[SigData.vbeam2 Sig(j).vbeam2];
        SigData.vbeam3=[SigData.vbeam3 Sig(j).vbeam3];
        SigData.vbeam4=[SigData.vbeam4 Sig(j).vbeam4];
        SigData.vbeam5=[SigData.vbeam5 Sig(j).vbeam5];
        
        SigData.Corbeam1=[SigData.Corbeam1 Sig(j).Corbeam1];
        SigData.Corbeam2=[SigData.Corbeam2 Sig(j).Corbeam2];
        SigData.Corbeam3=[SigData.Corbeam3 Sig(j).Corbeam3];
        SigData.Corbeam4=[SigData.Corbeam4 Sig(j).Corbeam4];
        SigData.Corbeam5=[SigData.Corbeam5 Sig(j).Corbeam5];
        
        SigData.Ampbeam1=[SigData.Ampbeam1 Sig(j).Ampbeam1];
        SigData.Ampbeam2=[SigData.Ampbeam2 Sig(j).Ampbeam2];
        SigData.Ampbeam3=[SigData.Ampbeam3 Sig(j).Ampbeam3];
        SigData.Ampbeam4=[SigData.Ampbeam4 Sig(j).Ampbeam4];
        SigData.Ampbeam5=[SigData.Ampbeam5 Sig(j).Ampbeam5];
        
        SigData.u_east=[SigData.u_east Sig(j).u_east];
        SigData.v_north=[SigData.v_north Sig(j).v_north];
        SigData.w_up=[SigData.w_up Sig(j).w_up];
        
        SigData.u_x=[SigData.u_x Sig(j).u_x];
        SigData.v_y=[SigData.v_y Sig(j).v_y];
        SigData.w_z=[SigData.w_z Sig(j).w_z];
        
        
        SigData.time=[SigData.time; Sig(j).time];
        SigData.Itime=[SigData.Itime; Sig(j).Itime];
        SigData.Ens_time=[SigData.Ens_time; Sig(j).Ens_time];
        SigData.IEns_time=[SigData.IEns_time; Sig(j).IEns_time];
        
        SigData.Heading=[SigData.Heading Sig(j).heading];
        SigData.Roll=[SigData.Roll Sig(j).roll];
        SigData.Pitch=[SigData.Pitch Sig(j).pitch];
        
        SigData.Pressure=[SigData.Pressure; Sig(j).pressure];
        
        SigData.IHeading=[SigData.IHeading; Sig(j).Iheading];
        SigData.IRoll=[SigData.IRoll; Sig(j).Iroll];
        SigData.IPitch=[SigData.IPitch; Sig(j).Ipitch];
        SigData.IPressure=[SigData.IPressure; Sig(j).Ipressure];
        
        
    end
    
    SigData.fs=fs;
    SigData.Irange=[Sig(1).Irange];
    SigData.range=[Sig(1).range];
    SigData.Nens=Nens;
    SigData.Ens_size=Ens_N;
    
    
    save([savepath '/' 'SignatureData_Bin' int2str(bin) '.mat'], 'SigData')
    
    
    bin
    length(Ens_N)
    clearvars -except bin fn fpath prefix savepath fs Nbin
    
end


